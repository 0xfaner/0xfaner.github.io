<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 配置指南</title>
    <url>/posts/hexo-config/</url>
    <content><![CDATA[<center>
<strong>本文记录了配置静态博客框架 Hexo 的相关流程</strong>
</center>
<span id="more"></span>
<h1 id="写在前面">写在前面</h1>
<blockquote>
<p>0xfaner 白嫖了一台阿里云的云服务器！</p>
</blockquote>
<p>这就是故事的开端：受疫情的影响，阿里云推出了「学生“在家实践”计划（现活动已结束）」。0xfaner 免费领到了一台 2 核 4G 的云服务器 <code>ECS</code>。</p>
<p>0xfaner 虽然抢到了服务器，但是麻烦也接踵而至。</p>
<blockquote>
<p>首先，0xfaner 收到了阿里云的通知，要求博客添加备案信息，否则要罚款，但是他发现自己没有进行公安备案，于是嫌麻烦的他索性连 ICP 备案一起注销了，反正博客托管在Github Page上。</p>
<p>第二天 0xfaner 收到了七牛云的通知，加速域名没有备案，所以图床失效了。0xfaner 访问了自己的博客，发现图床果然炸了，博客背景都没法显示了，凄凄惨惨。于是 0xfaner 把图片托管在了 Github Page 上。但是 Github Page 实在太慢了，过了两天 0xfaner 实在受不了啦，想到了 <code>ECS</code> 还没用，所以打算把博客部署在 <code>ECS</code> 上……</p>
</blockquote>
<p>五天后，终于配完了 Hexo 的踩坑带师 0xfaner 决定记录一下这次的配置经历。</p>
<h1 id="简介">简介</h1>
<p>Hexo 是基于 Node.js 的一款静态博客框架，可以方便地生成静态网页托管在 GitHub 或服务器上。搭建博客的性价比之选，依赖少易于安装。</p>
<p>首先介绍下 Hexo 的机制：本地环境生成静态文件，将这些文件托管在平台上，这样用户只能访问到你生成的静态文件。所以评论这样的功能 Hexo 必须依靠第三方插件实现。但是好处是降低平台负担，仅需要托管即可。</p>
<p>本次部署环境：</p>
<ul>
<li><p>远程服务器：CentOS 7.7</p></li>
<li><p>本地：Windows 10</p></li>
</ul>
<p>注意本文中的本地环境已经配置好了部署到 Github Page 所需的全部要求。</p>
<h1 id="服务器配置">服务器配置</h1>
<p>服务器端需要两个环境：</p>
<ul>
<li><p>Git，用于接收静态文件并部署到指定文件夹。</p></li>
<li><p>Nginx，用于托管静态文件。</p></li>
</ul>
<h2 id="git">Git</h2>
<h3 id="安装">安装</h3>
<p>首先检查 Git 是否安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p>如果显示：<code>-bash: git: command not found</code> 则说明没有安装，那么：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure>
<h3 id="配置">配置</h3>
<p>为了安全，我们新建一个名为 git 的用户，专门用于接受静态文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd git // 添加用户名为git</span><br><span class="line">passwd git // 设置用户git的密码</span><br><span class="line">su git //用户切换到git</span><br></pre></td></tr></table></figure>
<p>Git 仓库目录在 <code>/home/git/repos/blog.git</code> ，静态文件部署在 <code>/home/git/projects/blog</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/</span><br><span class="line">mkdir -p projects/blog // 项目存在的真实目录</span><br><span class="line">mkdir repos &amp;&amp; <span class="built_in">cd</span> repos</span><br><span class="line">git init --bare blog.git // 创建一个裸露的仓库</span><br></pre></td></tr></table></figure>
<p>我们需要配置 Git，利用 <code>post-receive</code> 实现自动化部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog.git/hooks</span><br><span class="line">vi post-receive // 创建 hook 钩子函数</span><br></pre></td></tr></table></figure>
<p>输入内容如下（不了解 Vim 文本编辑器操作的用户需要自行了解一下）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f</span><br></pre></td></tr></table></figure>
<p>然后配置权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x post-receive // 配置可执行权限</span><br><span class="line"><span class="built_in">exit</span> // 退出到 root 登录</span><br><span class="line">chown -R git:git /home/git/repos/blog.git // 添加权限</span><br></pre></td></tr></table></figure>
<p>然后我们测试一下仓库是否成功配置，在本地：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@0xfaner.top:/home/git/repos/blog.git</span><br></pre></td></tr></table></figure>
<p>如果能够把空仓库拉下来就说明配置完成。</p>
<p>然后我们建立 SSH 信任关系：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub git@0xfaner.top // 将本机的公钥复制到服务器中</span><br><span class="line">ssh git@0xfaner.top // 测试能否登录</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意使用 <code>Git Bash</code> 进行操作，否则第一条命令 <code>ssh-copy-id</code> 无法运行。注意此操作需要本地已经生成过公钥私钥，使用 <code>ssh-keygen</code> 生成。</p>
</blockquote>
<p>如果不需要密码而成功登陆了，那么说明配置完成，运行命令 <code>logout</code> 即可退出登录。</p>
<p>安全起见，禁用 git 用户的 shell 登录权限，使其只能用 <code>git clone</code> 与 <code>git push</code> 等命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/shells // 查看 git-shell 是否在登录方式里面</span><br><span class="line"><span class="built_in">which</span> git-shell // 查看是否安装</span><br><span class="line">vi /etc/shells // 添加上2步显示出来的路径，通常在 /usr/bin/git-shell</span><br></pre></td></tr></table></figure>
<p>然后修改 <code>/etc/passwd</code> 的权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/passwd</span><br></pre></td></tr></table></figure>
<p>进行如下修改：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- git:x:1000:1000::/home/git:/bin/bash</span></span><br><span class="line"><span class="addition">+ git:x:1000:1000:,,,:/home/git:/usr/bin/git-shell</span></span><br></pre></td></tr></table></figure>
<h2 id="nginx">Nginx</h2>
<h3 id="安装-1">安装</h3>
<p>首先检查 Nginx 是否安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure>
<p>如果显示：<code>-bash: nginx: command not found</code> 则说明没有安装，那么：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>
<p>安装完成后，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure>
<p>然后访问自己服务器的IP或域名来看看效果吧。</p>
<h3 id="配置-1">配置</h3>
<p>修改 Nginx 的配置文件 nginx.conf，一般目录为 <code>/etc/nginx/nginx.conf</code> 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>如果目录位置不对，那么：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure>
<p>然后根据显示的目录找一下吧（x</p>
<p>将其中的 <code>user</code> 从默认的 <code>nginx</code> 改为 <code>git</code> 或 <code>root</code> 以确保访问权限，防止出现 <code>403 Forbidden</code> 错误。</p>
<p>同时将根目录修改为静态文件所在的目录：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- user nginx;</span></span><br><span class="line"><span class="addition">+ user git;</span></span><br><span class="line"># ...</span><br><span class="line">http &#123;</span><br><span class="line">    # ...</span><br><span class="line">    server &#123;</span><br><span class="line">        # ...</span><br><span class="line"><span class="deletion">-        root    /usr/share/nginx/html/;</span></span><br><span class="line"><span class="addition">+        root    /home/git/projects/blog;</span></span><br><span class="line">        # ...</span><br><span class="line">    &#125;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改完成后，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>以重启 Nginx。</p>
<h1 id="本地配置">本地配置</h1>
<p>默认大家都是已经实现了 hexo 部署到 Github Page 了，那么只需要修改站点配置文件<code>_config.yml</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@0xfaner.top:/home/git/repos/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>然后本地运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>就完成了部署啦~</p>
<h1 id="其他技巧">其他技巧</h1>
<h2 id="开启https">开启HTTPS</h2>
<p>首先需要配置一份证书，可以使用 <a href="https://letsencrypt.org">Let's Encrypt</a> 的免费证书或在阿里云等服务商处代为申请。</p>
<p>因为是纯静态博客，所以也不需要用 Certbot 进行一键 HTTPS 配置，直接在 Nginx 里面加载证书就行。</p>
<p>首先将证书传输到服务器中，包括 <code>.pem</code> 和 <code>.key</code> 两个文件。</p>
<p>然后将 <code>nginx.conf</code> 文件中的 HTTPS 部分取消注释，修改根目录，并配置证书路径。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">user git;</span><br><span class="line"># ...</span><br><span class="line">http &#123;</span><br><span class="line">    # ...</span><br><span class="line">    server &#123;</span><br><span class="line">        # ...</span><br><span class="line">        root    /home/git/projects/blog;</span><br><span class="line">        # ...</span><br><span class="line">    &#125;</span><br><span class="line">    # ...</span><br><span class="line">    server &#123;</span><br><span class="line">        # ...</span><br><span class="line"><span class="deletion">-        root    /usr/share/nginx/html/;</span></span><br><span class="line"><span class="addition">+        root    /home/git/projects/blog;</span></span><br><span class="line"><span class="deletion">-        ssl_certficate &quot;old_path&quot;;</span></span><br><span class="line"><span class="addition">+        ssl_certficate &quot;new_path&quot;;</span></span><br><span class="line"><span class="deletion">-        ssl_certficate_key &quot;old_path&quot;;</span></span><br><span class="line"><span class="addition">+        ssl_certficate_key &quot;new_path&quot;;</span></span><br><span class="line">        # ...</span><br><span class="line">    &#125;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>即可完成配置。</p>
<h2 id="http强制跳转https">HTTP强制跳转HTTPS</h2>
<p>如果希望访问都以 HTTPS 方式，那么需要配置 HTTP 强制跳转 HTTPS。修改 <code>nginx.conf</code> 文件即可。</p>
<p>从下面两段代码中任选一段：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">if</span> ($scheme = http) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">if</span> ($server_port = <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插入到：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span> git;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="attribute">root</span>    /home/git/projects/blog;</span><br><span class="line">        <span class="comment"># 这里这里这里</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="attribute">root</span>    /home/git/projects/blog;</span><br><span class="line">        <span class="attribute">ssl_certficate</span> <span class="string">&quot;new_path&quot;</span>;</span><br><span class="line">        <span class="attribute">ssl_certficate_key</span> <span class="string">&quot;new_path&quot;</span>;</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>即可完成配置。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛相关模板</title>
    <url>/posts/ac-template/</url>
    <content><![CDATA[<center>
<strong>本文包括算法竞赛中常用的一些算法模板</strong>
</center>
<span id="more"></span>
<h1 id="快速读入">快速读入</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(_tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>(), sgn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch ^ <span class="string">&#x27;-&#x27;</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) ch = <span class="built_in">getchar</span>(), sgn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>()) x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (sgn) x = -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用了<strong>template</strong>，这样即可读入任意的整数类型（**包括__int128**）。</p>
<h1 id="快速输出">快速输出</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(_tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">print</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用了<strong>template</strong>，这样即可输出任意的整数类型（**包括__int128**）。</p>
<h1 id="离散化">离散化</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">disperse</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) b[i] = a[i];</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> m = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + m + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>离散化后 <span class="math inline">\(a\)</span> 数组即变为离散化后的数组，该函数的返回值即为离散化后数组元素的种类。</p>
<h1 id="st表">ST表</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[N], st[N][M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) st[i][<span class="number">0</span>] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; j++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + (<span class="number">1</span> &lt;&lt; j) &lt;= n; i++)</span><br><span class="line">            st[i][j] = <span class="built_in">min</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = (<span class="keyword">int</span>)(<span class="built_in">log</span>((<span class="keyword">double</span>)(r - l + <span class="number">1</span>)) / <span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(st[l][k], st[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm Contest</category>
      </categories>
      <tags>
        <tag>Template</tag>
      </tags>
  </entry>
  <entry>
    <title>约瑟夫问题探究</title>
    <url>/posts/problem-josephus/</url>
    <content><![CDATA[<center>
<strong>本文探究了约瑟夫问题的相关知识。</strong>
</center>
<span id="more"></span>
<h1 id="问题介绍">问题介绍</h1>
<p>约瑟夫问题是指这样一类问题：<span class="math inline">\(n\)</span> 个人围成一圈，编号为 <span class="math inline">\(1\)</span> 到 <span class="math inline">\(n\)</span>。从 <span class="math inline">\(1\)</span> 号最先从 <span class="math inline">\(1\)</span> 开始报数，每次报到 <span class="math inline">\(m\)</span> 的人出圈，下一个人重新从 <span class="math inline">\(1\)</span> 开始报数，直到剩下最后一人为止。</p>
<h1 id="解法介绍">解法介绍</h1>
<p>其中影响到一个人在出圈顺序中的位置 <span class="math inline">\(id\)</span> 的有三个关键参量：他的编号 <span class="math inline">\(i\)</span> 、人数 <span class="math inline">\(n\)</span> 以及出圈间歇 <span class="math inline">\(m\)</span>。</p>
<p>在某些特殊情况下，部分参量并不起作用。如 <span class="math inline">\(m|i\)</span> 时， <span class="math inline">\(i\)</span> 对 <span class="math inline">\(id\)</span> 无影响； <span class="math inline">\(m = 1\)</span> 时， <span class="math inline">\(n\)</span> 对 <span class="math inline">\(id\)</span> 无影响。在部分题目中这可能成为解题的关键。</p>
<p>该类问题有两种问法，分别是：</p>
<ul>
<li><p>询问约瑟夫排列（即出圈顺序）</p></li>
<li><p>询问第 <span class="math inline">\(k\)</span> 出圈（第 <span class="math inline">\(n\)</span> 出圈者即为获胜者）</p></li>
</ul>
<h2 id="询问约瑟夫排列">询问约瑟夫排列</h2>
<h3 id="一般情况">一般情况</h3>
<p>时间复杂度 <span class="math inline">\(\mathcal{O}(n \log n)\)</span>。</p>
<p>这样考虑问题：假定当前出圈的人编号为当前第 <span class="math inline">\(k\)</span> 小，此人出圈后圈内还有 <span class="math inline">\(n\)</span> 人，那么下一个出圈的人为圈内编号第 <span class="math inline">\((k-1+m-1)\bmod n + 1\)</span> 小。</p>
<p>那么只需要一个数据结构，满足能够单点修改，并查询区间第 <span class="math inline">\(k\)</span> 小的：权值树状数组。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ValueBIT</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        c.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            c[i] = <span class="built_in">lowbit</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">            c[i] += x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_kth</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> add = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            add += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            <span class="keyword">if</span> (add &gt; n || c[add] + sum &gt;= k) &#123;</span><br><span class="line">                add -= <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += c[add];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> add + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; vbit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    vbit.<span class="built_in">init</span>(n);</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        now = (now - <span class="number">1</span> + m - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = vbit.<span class="built_in">find_kth</span>(now);</span><br><span class="line">        vbit.<span class="built_in">add</span>(k, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, k);</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然也可以使用顺序统计树</p>
<h2 id="询问第-k-出圈">询问第 <span class="math inline">\(k\)</span> 出圈</h2>
<h3 id="时间复杂度-mathcalok">时间复杂度 <span class="math inline">\(\mathcal{O}(k)\)</span></h3>
<p>令 <span class="math inline">\(f(n,m,k)\)</span> 表示第 <span class="math inline">\(k\)</span> 出圈人。</p>
<p>有公式：</p>
<p><span class="math display">\[
f(n,m,k)=
\begin{cases}
(m - 1) \bmod n + 1 &amp; , k = 1 \\
(f(n - 1, m, k - 1) -1 + m) \bmod n + 1 &amp; , k &gt; 0
\end{cases}
\]</span></p>
<p>代码实现如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((k == <span class="number">1</span> ? <span class="number">0</span> : <span class="built_in">f</span>(n - <span class="number">1</span>, m, k - <span class="number">1</span>)) - <span class="number">1</span> + m) % n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然也有非递归的写法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = (m - <span class="number">1</span>) % (n - k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        s = (s + m) % i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="时间复杂度-mathcalolog_fracmm---1n">时间复杂度 <span class="math inline">\(\mathcal{O}(\log_{\frac{m}{m - 1}}n)\)</span></h3>
<p>当 <span class="math inline">\(n&gt;&gt;m\)</span> 时，每次从 <span class="math inline">\(1\)</span> 到 <span class="math inline">\(n\)</span> 的一个循环中，有 <span class="math inline">\(\lfloor \frac{n}{m} \rfloor \times m\)</span> 人报数，其中 <span class="math inline">\(\lfloor \frac{n}{m} \rfloor\)</span> 人出圈。</p>
<p>参考前面时间复杂度 <span class="math inline">\(\mathcal{O}(k)\)</span> 的式子，可以发现在此过程中有许多取模操作是无作用的。</p>
<p>于是我们可以合并一些操作，使得部分加法合并为乘法。</p>
<p>有公式</p>
<p><span class="math display">\[
f(n, m, k) = (f(n - c, m, k - c) - 1 + m \times c) \bmod n + 1
\]</span></p>
<p>式中 <span class="math inline">\(c\)</span> 表示从当前的 <span class="math inline">\(n\)</span> 一直变化到到 <span class="math inline">\(c\)</span> 的期间内取模都无作用的最大的 <span class="math inline">\(c\)</span>。</p>
<p>代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = n - k + <span class="number">1</span>, s = (m - <span class="number">1</span>) % i;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="built_in">min</span>(n - i, (i - s + m - <span class="number">2</span>) / (m - <span class="number">1</span>));</span><br><span class="line">        s = (s + m * c) % (i += c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="时间复杂度-mathcalofracmkn">时间复杂度 <span class="math inline">\(\mathcal{O}(\frac{mk}{n})\)</span></h3>
<p>易知第 <span class="math inline">\(k\)</span> 出圈人为第 <span class="math inline">\(k \times m\)</span> 报数人，以此为基础进行推导。</p>
<p>首先明确几个概念：</p>
<ul>
<li><p>位置编号：从 <span class="math inline">\(1\)</span> 开始编号到 <span class="math inline">\(n\)</span>，表示在圈内的初始编号为 <span class="math inline">\(k\)</span>。</p></li>
<li><p>报数编号：从 <span class="math inline">\(1\)</span> 开始编号到 <span class="math inline">\(n \times m\)</span>，表示第 <span class="math inline">\(k\)</span> 次报数。</p></li>
<li><p>报数：从 <span class="math inline">\(1\)</span> 开始编号到 <span class="math inline">\(m\)</span>，表示某人所报的某个数。</p></li>
</ul>
<p>首先取一个报数编号 <span class="math inline">\(p\)</span>，对应位置编号 <span class="math inline">\(id\)</span>。可以用该式来表示：<span class="math inline">\(p = a \times m + b\)</span> (<span class="math inline">\(0 \leq a &lt; n\)</span>, <span class="math inline">\(1 \leq b \leq m\)</span>)。实际含义是：在第 <span class="math inline">\(a\)</span> 轮报数结束后，报数为 <span class="math inline">\(b\)</span>。</p>
<p>那么容易推出以下信息：</p>
<ul>
<li><p>此时圈内所剩人员数量为 <span class="math inline">\(n - a\)</span></p></li>
<li><p>若此人报数 <span class="math inline">\(b = m\)</span>，则此人出局。否则圈内剩余的人将会恰好各报一次数，然后此人会再一次报数。</p></li>
</ul>
<p>假设此人未出局，那么 <span class="math inline">\(b &lt; m\)</span>。</p>
<p>设此人下一次报数编号为 <span class="math inline">\(q\)</span>，易知 <span class="math inline">\(q = p + n - a = a \times (m - 1) + b + n\)</span>。</p>
<p>那么可以推导：<span class="math inline">\(a = \dfrac{q - n - b}{m-1} = \lfloor \dfrac{q - n - 1}{m - 1} \rfloor\)</span>。</p>
<p>所以有：<span class="math inline">\(p = q - n + a = q - n - \lfloor \dfrac{q - n - 1}{m - 1} \rfloor = \lfloor \dfrac{(q - n - 1) \times m}{m - 1} \rfloor + 1\)</span></p>
<p>这样就完成了后继公式到前驱公式的变化，如此不断迭代，直到得到他是第 <span class="math inline">\(k\)</span> 报数人为止。</p>
<p>有公式：</p>
<p><span class="math display">\[
f(n, m, k) = g(n, m, k \times m)
\]</span></p>
<p><span class="math display">\[
g(n, m, x) =
\begin{cases}
x &amp; , x \leq n \\
g(n, m, \lfloor \dfrac{(x - 1 - n) \times m}{m - 1} \rfloor + 1) &amp;, x &gt; n
\end{cases}
\]</span></p>
<p>代码实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt;= n ? x : <span class="built_in">g</span>(n, m, (x - <span class="number">1</span> - n) * m / (m - <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">g</span>(n, m, k * m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到该函数可以非递归实现，给出优化后的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = k * m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (s &gt;= n) &#123;</span><br><span class="line">        s = (s - n) * m / (m - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm Contest</category>
      </categories>
      <tags>
        <tag>Josephus problem</tag>
        <tag>research</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code 配置 C/C++ 环境指南</title>
    <url>/posts/vscode-config/</url>
    <content><![CDATA[<center>
<strong>本文介绍了 VSCode 配置 C/C++ 环境的方法与注意事项。</strong>
</center>
<span id="more"></span>
<h2 id="写在前面">写在前面</h2>
<p>Visual Studio Code（以下简称 VSCode）是一个运行于 Mac OS X、Windows 和 Linux 之上的，针对于编写现代 Web 和云应用的 跨平台源代码编辑器。</p>
<p>该编辑器集成了所有一款现代编辑器所应该具备的特性，包括「语法高亮（syntax high lighting）」，「可定制的热键绑定（customizable keyboard bindings）」，「括号匹配（bracket matching）」以及「代码片段收集（snippets）」。同时这款编辑器也拥有对 Git 的开箱即用的支持。</p>
<p>VSCode 如此优秀，以至于我这个算法竞赛选手也被它的轻量、简洁与优美深深吸引。在算法竞赛中，C++ 是每一个选手必须掌握的编程语言。因此我今天特地写了这篇文章来介绍一下如何配置 VSCode 的 C/C++环境。</p>
<h2 id="准备">准备</h2>
<p>本次教程使用 Windows 10 系统，VSCode 版本为 1.51。</p>
<h2 id="安装-vscode">安装 VSCode</h2>
<p><a href="https://code.visualstudio.com/Download">下载地址</a></p>
<h2 id="安装插件">安装插件</h2>
<p>点击左侧 Extensions 进入应用商店，搜索 C/C++。</p>
<p>选择第一个候选项（左上角有星标），安装。</p>
<blockquote>
<p>此时可以顺手安装一个中文插件，插件名 <code>Chinese (Simplified) Language Pack for Visual Studio Code</code>。</p>
</blockquote>
<h2 id="安装编译调试环境">安装编译/调试环境</h2>
<blockquote>
<p>VSCode 是一款编辑器而非 IDE（集成开发环境），所以想要 VSCode 能够编译或调试 C++ 程序，需要我们本地有环境才行。</p>
</blockquote>
<p>如果你本地已经有了 C++ 环境，如电脑中已经安装了 Dev-Cpp 或 Code::Blocks 等软件可跳过该步，直接跳转到下一步<a href="#配置系统环境变量">配置系统环境变量</a>。</p>
<p>本文推荐安装环境为 <a href="https://jmeubank.github.io/tdm-gcc/">TDM-GCC</a>，TDM-GCC 目前的最新版本基于 GCC 9.2.0（已经停止开发的 Dev-Cpp 的最新的 5.11 版本则是基于 GCC 4.9.2）。</p>
<h2 id="配置系统环境变量">配置系统环境变量</h2>
<blockquote>
<p>光有环境还不够，我们需要能够通过命令行调用 g++ 才行，所以需要配置环境变量。</p>
</blockquote>
<blockquote>
<p>TDM-GCC 可以自动配置环境变量，只需要在安装的时候注意勾选即可。</p>
</blockquote>
<blockquote>
<p>注意 Dev-Cpp 和 Code::Blocks 都是基于 MinGW 的，命令行调用 MinGW 时路径不能有中文。所以如果是基于 MinGW 环境进行编译/调试，则需要编译器路径和编译文件路径都不能有中文（注意这里的路径不仅仅指文件所在的各级文件夹名，也指文件的文件名）。</p>
</blockquote>
<p><strong>具体如何配置环境可以自行百度。</strong></p>
<p>检验系统环境变量是否配置成功，可以在命令行窗口中键入 <code>g++ --version</code> 并回车。如果显示能够显示 g++ 的版本信息就说明配置成功了，否则如果显示 <code>g++: command not found</code> 则说明还没配置成功。</p>
<blockquote>
<p>打开命令行方式有很多，下面列举几种：</p>
<ol type="1">
<li><p>按 <code>win + r</code> 打开「运行」窗口，键入 <code>cmd</code> 并回车，即可打开 Windows 的命令行窗口；</p></li>
<li><p>在 VSCode 界面中按 <code>Ctrl + ~</code> 打开终端；</p></li>
<li><p>直接打开 Git Bash。</p></li>
</ol>
<p>注意：每次检验系统环境变量是否配置成功需要重新启动一次终端。因为终端只在启动时读取一次环境变量，后续修改环境变量不会对当前终端产生影响。</p>
</blockquote>
<p>配置完环境变量最好重启一下 VSCode，以确保环境变量生效。</p>
<blockquote>
<p>VSCode 编译/调试 C/C++ 程序是基于命令行的，在 VSCode 的下方有一个命令行界面，如果修改了环境变量，该命令行也同样需要重启。重启 VSCode 或者直接关闭当前 VSCode 使用的终端均可以达到效果。</p>
</blockquote>
<h2 id="添加修改-vscode-调试配置文件">添加/修改 VSCode 调试配置文件</h2>
<p>VSCode 的调试需要在打开的文件夹中进行（因为 VSCode 会生成一个该文件夹的配置文件），而不能像 Dev-Cpp 直接编译或调试单文件。所以我推荐建立一个你自己的代码文件夹，以后调试就在这个文件夹中进行。</p>
<blockquote>
<p>如果是基于 MinGW 环境进行编译/调试，则需要编译器路径和编译文件路径都不能有中文。</p>
</blockquote>
<p>在 VSCode 中依次点击「文件」和「打开文件夹」，即可打开文件夹。</p>
<p>新建一个后缀名为 <code>.cpp</code> 的文件，如 <code>test.cpp</code>，键入一段简单的 C/C++ 代码，例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时按调试快捷键 <code>F5</code>，会提示你选择环境，选择 <code>C++(GDB/LLCB)</code>，此时会提示你再选择一个配置，选择 <code>g++.exe build active file</code>。</p>
<p>此时将新建的 <code>launch.json</code> 文件的内容替换为如下文本：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;(GDB) Launch &amp; Pause&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;g++&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;C:/WINDOWS/system32/cmd.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/C&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&amp;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pause&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;C:/TDM-GCC-64/bin/gdb.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;(GDB) Launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;g++&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;C:/TDM-GCC-64/bin/gdb.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意配置文件中 <code>"miDebuggerPath"</code>字段的值为应为你选择的环境的路径，如果是 TDM-GCC 则无需修改，否则需要你修改为实际路径。</p>
<p>此时在 <code>test.cpp</code> 的代码页按 <code>F5</code>，会提示你 <code>找不到任务“g++”</code>，选择 <code>配置任务</code>。</p>
<p>点击 <code>使用模板创建 tasks.json 文件</code>，然后选择 <code>Others</code>。</p>
<p>此时将新建的 <code>tasks.json</code> 内容替换为如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;g++&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;-Wfatal-errors&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-Wextra&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-Wall&quot;</span>,</span><br><span class="line">        <span class="string">&quot;$&#123;relativeFile&#125;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-std=$&#123;config:C_Cpp.default.cppStandard&#125;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-o&quot;</span>,</span><br><span class="line">        <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;problemMatcher&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fileLocation&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;relative&quot;</span>,</span><br><span class="line">            <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;pattern&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;regexp&quot;</span>: <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;file&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;line&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;column&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;severity&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;message&quot;</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后按 <code>Ctrl + Shift + P</code>，键入 <code>Open Settings (JSON)</code>，选择第一项，打开 <code>settings.json</code> 文件，在其中加入字段 <code>"C_Cpp.default.cppStandard": "c++11"</code>。</p>
<blockquote>
<p>要注意在本行尾或上一行尾加入一个逗号，以保证字段间用逗号隔开。如果没有其他字段，就不需要加逗号了。</p>
</blockquote>
<p>如果有些同学发现自己的头文件部分有下划线，此时需要添加配置文件：<code>c_cpp_properties.json</code>。按下 <code>Ctrl + Shift + P</code>，键入 <code>C/C++:Edit Configurations(JSON)</code>，将中的 <code>"compilerPath"</code> 字段的值改为你所设置的环境即可。</p>
<p>此时回到代码页面，按 <code>F5</code>。弹出了 cmd 窗口。键入 <code>1 2</code>，在第二行出现了 <code>3</code>，说明配置成功！</p>
<h2 id="注意事项">注意事项</h2>
<p>本文介绍的配置支持程序运行结束后等待用户按下任意键再关闭窗口。如需要此功能，请在调试时选择配置：<code>(GDB) Launch &amp; Pause</code>。如不需要，请选择配置：<code>(GDB) Launch</code>。</p>
<p>本文中配置的 C++ 标准默认为 C++11，如果需要更改，只需要修改 settings.json 文件中的 <code>"C_Cpp.default.cppStandard"</code> 字段的值为你所需要的标准即可。</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Visual Studio Code</tag>
      </tags>
  </entry>
  <entry>
    <title>生成树问题探究</title>
    <url>/posts/problem-spanning-tree/</url>
    <content><![CDATA[<center>
<strong>本文探究了生成树问题的相关知识。</strong>
</center>
<span id="more"></span>
<h1 id="写在前面">写在前面</h1>
<p>生成树问题是图论的重点，其中最小生成树更是最基础的入门问题。0xfaner 将会在这里记录他有关生成树的理解。此类问题众多，本文将不断更新。</p>
<h1 id="问题介绍">问题介绍</h1>
<p>给定一个 <span class="math inline">\(n\)</span> 个顶点， <span class="math inline">\(m\)</span> 条边的无向图。要求你从中选择 <span class="math inline">\(n - 1\)</span> 条边，构成一个具有特殊性质的树。</p>
<p>ACM 中常见的生成树包括：</p>
<ul>
<li>最大/小生成树</li>
<li>次大/小生成树</li>
<li>生成树计数</li>
</ul>
<h1 id="解法介绍">解法介绍</h1>
<h2 id="最大小生成树">最大/小生成树</h2>
<p>以最小生成树 <code>Minimum Spanning Tree</code>（简称 <code>MST</code>）为例。最大生成树和最小生成树解法是完全一样的。<del>不过似乎最大生成树也叫 MST</del></p>
<p>首先给出定义：假定每条边都有一个权值，那么所有生成树中权值最小的即为最小生成树。</p>
<p>问法有两种：</p>
<ul>
<li><p>询问最小生成树的权值/构成</p></li>
<li><p>最小生成树计数</p></li>
</ul>
<p>解法是著名的 <code>Kruskal</code> 算法，算法得名于他的发现者<strong>Joseph Kruskal</strong>。</p>
<p>权值是唯一的，但是构成可能有很多种。如果询问你某种特定的边的优先级的顺序下的最小生成树，那么只需修改排序的法则即可。因为 <code>kruskal</code> 算法基于贪心，让权值相同的边中优先级高的排在前面就行。</p>
<h3 id="kruskal">Kruskal</h3>
<blockquote>
<p>将图 <span class="math inline">\(G=\{V,E\}\)</span> 中的所有边按照长度由小到大进行排序，等长的边可以按任意顺序。</p>
<p>初始化图 <span class="math inline">\(G&#39;\)</span> 为 <span class="math inline">\(\{V,\varnothing\}\)</span> ,从前向后扫描排序后的边，如果扫描到的边 <span class="math inline">\(e\)</span> 在 <span class="math inline">\(G&#39;\)</span> 中连接了两个相异的连通块,则将它插入 <span class="math inline">\(G&#39;\)</span> 中。</p>
<p>最后得到的图 <span class="math inline">\(G&#39;\)</span> 就是图 <span class="math inline">\(G\)</span> 的最小生成树。</p>
</blockquote>
<p>简单地说：</p>
<blockquote>
<p>对所有边进行排序，从小到大进行枚举，每次贪心选边加入答案。使用并查集维护连通性，若当前边两端不连通即可选择这条边。</p>
</blockquote>
<p>因为要排序并枚举每一条边，所以需要用边集数组存储这张图。时间复杂度 <span class="math inline">\(\mathcal{O}(m \log m)\)</span> 。</p>
<h3 id="询问权值构成">询问权值/构成</h3>
<h4 id="模板luogu3366">模板（luogu3366</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 200001</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, w;</span><br><span class="line">&#125; e[M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[N], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        f[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;e[i].x, &amp;e[i].y, &amp;e[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, [](<span class="keyword">const</span> Edge &amp;a, <span class="keyword">const</span> Edge &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m &amp;&amp; num &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fx = <span class="built_in">find</span>(e[i].x), fy = <span class="built_in">find</span>(e[i].y);</span><br><span class="line">        <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">            f[fx] = fy, sum += e[i].w, num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; n) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;orz\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最小生成树计数">最小生成树计数</h3>
<p>因为最小生成树的构成可能有很多种，所以有时候会询问到底有多少种最小生成树，而且答案一般都很大，需要取模。</p>
<p>计数问题中依旧要用到 <code>Kruskal</code> 算法，算法详情见上。</p>
<p>首先明确：<strong>一个无向图所有最小生成树的权值构成唯一</strong>。</p>
<p>即若一个最小生成树的边权值分别为 <span class="math inline">\(a_1, a_2\dots a_{n-1}\)</span> ，则其它的最小生成树的权值也均为 <span class="math inline">\(a_1, a_2\dots a_{n-1}\)</span> 。</p>
<p>那么我们应该将所有权值相同的边的处理当作一个整体来分阶段看待。</p>
<p>令 <code>kruskal</code> 处理完第 <span class="math inline">\(i\)</span> 阶段后得到的图为 <span class="math inline">\(G_i\)</span> ，那么有：<strong>任意的 <span class="math inline">\(G_i\)</span> 的连通性唯一</strong>。</p>
<p>即在 <code>kruskal</code> 算法中的任意时刻，我们并不需要关注 <span class="math inline">\(G&#39;\)</span> 的具体形态，而只要关注各个点的连通性如何。</p>
<p>这样一来，各个阶段即互相独立开来，对于每一阶段计算他有多少种择边方式，最后统一相乘即可。</p>
<p>如果题目中没有限制等长边的数量，那么可以使用矩阵树做法，详见<strong>生成树计数</strong>部分。</p>
<p>需要注意的是这里的并查集不能路径优化，否则会丢失一部分路径信息。</p>
<p>时间复杂度不够好看，假定等长边至多可能有 <span class="math inline">\(k\)</span> 条，则时间复杂度为 <span class="math inline">\(\mathcal{O}(2^k m \log n)\)</span> 。</p>
<h4 id="代码luogu4208">代码（luogu4208</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 31011</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, w;</span><br><span class="line">&#125; e[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[N], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] == x ? x : <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sEdge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, w;</span><br><span class="line">&#125; se[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> now, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (now == se[x].r + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> k == se[x].w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> fx = <span class="built_in">find</span>(e[now].x), fy = <span class="built_in">find</span>(e[now].y);</span><br><span class="line">    <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">        f[fx] = fy;</span><br><span class="line">        sum += <span class="built_in">dfs</span>(x, now + <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">        f[fx] = fx, f[fy] = fy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum + <span class="built_in">dfs</span>(x, now + <span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        f[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;e[i].x, &amp;e[i].y, &amp;e[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, [](<span class="keyword">const</span> Edge &amp;a, <span class="keyword">const</span> Edge &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>, snum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i].w != e[i - <span class="number">1</span>].w) &#123;</span><br><span class="line">            se[snum++].r = i - <span class="number">1</span>, se[snum].l = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fx = <span class="built_in">find</span>(e[i].x), fy = <span class="built_in">find</span>(e[i].y);</span><br><span class="line">        <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">            f[fx] = fy, se[snum].w++, num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; n) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    se[snum].r = m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = i;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= snum; i++) &#123;</span><br><span class="line">        ans = ans * <span class="built_in">dfs</span>(i, se[i].l, <span class="number">0</span>) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = se[i].l; j &lt;= se[i].r; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> fx = <span class="built_in">find</span>(e[j].x), fy = <span class="built_in">find</span>(e[j].y);</span><br><span class="line">            <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">                f[fx] = fy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="次大小生成树">次大/小生成树</h2>
<p>以次小生成树为为例。次大生成树和次小生成树解法是完全一样的。</p>
<p>次小生成树分两种：</p>
<ul>
<li><p>非严格次小生成树</p></li>
<li><p>严格次小生成树</p></li>
</ul>
<h3 id="非严格次小生成树">非严格次小生成树</h3>
<p>首先给出定义：一个图的非严格次小生成树，是指异于该图的最小生成树的权值最小的生成树。</p>
<p>需要注意的是，这里的次小生成树可能与最小生成树权值相等。</p>
<p>首先明确：<strong>次小生成树可以由最小生成树更换一条边得到</strong>。</p>
<p>首先构造原图的最小生成树。然后尝试将每一条不在最小生成树中的边 <code>(u, v, w)</code> 加入生成树。</p>
<p>加入边的过程中会产生环，所以在加边之前删去最小生成树上 <code>u</code> 到 <code>v</code> 的路径上权值最大的边。在枚举每一条边时我们都会得到一棵生成树，这些生成树中边权和最小的即为要求的次小生成树。</p>
<p>需要在构造最小生成树时将完整的树结构构造出来，并且使用树上倍增查询两点间边权值最大值。</p>
<p>时间复杂度 <span class="math inline">\(\mathcal{O}(m \log m)\)</span>。</p>
<h4 id="模板poj1679">模板（POJ1679</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> G[N][N];</span><br><span class="line"><span class="keyword">int</span> f[N], n, m;</span><br><span class="line"><span class="keyword">int</span> dis[N][N], used[N * N], vis[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, w;</span><br><span class="line">&#125; e[N * N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    vis[v] = <span class="literal">true</span>, dis[u][v] = w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G[v][i] != INF &amp;&amp; !vis[i]) &#123;</span><br><span class="line">            <span class="built_in">search</span>(u, i, <span class="built_in">max</span>(w, G[v][i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(G, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(G));</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">        <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(used));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            f[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;e[i].x, &amp;e[i].y, &amp;e[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, [](<span class="keyword">const</span> Edge &amp;a, <span class="keyword">const</span> Edge &amp;b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; num &lt; n &amp;&amp; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> fx = <span class="built_in">find</span>(e[i].x), fy = <span class="built_in">find</span>(e[i].y);</span><br><span class="line">            <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">                f[fx] = fy, sum += e[i].w, num++;</span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                G[e[i].x][e[i].y] = G[e[i].y][e[i].x] = e[i].w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">            <span class="built_in">search</span>(i, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; flag &amp;&amp; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[i] &amp;&amp; e[i].w == dis[e[i].x][e[i].y]) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Not Unique!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="严格次小生成树">严格次小生成树</h3>
<p>首先给出定义：一个图的非严格次小生成树，是指权值大于该图的最小生成树的权值的权值最小的生成树。<del>（我在说什么</del></p>
<p>需要注意的是，这里的次小生成树不可能与最小生成树权值相等。</p>
<p>做法和非严格次小生成树一样，树上倍增多维护一个两点间边权次大值即可。</p>
<p>时间复杂度 <span class="math inline">\(\mathcal{O}(m \log m)\)</span></p>
<h4 id="模板luogu4180">模板（luogu4180</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 300001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S 21</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, w;</span><br><span class="line">&#125; e[M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hd[N], nx[N &lt;&lt; <span class="number">1</span>], ed[N &lt;&lt; <span class="number">1</span>], wt[N &lt;&lt; <span class="number">1</span>], num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Addedge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    nx[++num] = hd[x], hd[x] = num, ed[num] = y, wt[num] = w;</span><br><span class="line">    nx[++num] = hd[y], hd[y] = num, ed[num] = x, wt[num] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m1[N][S], m2[N][S], dep[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    dep[x] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = hd[x]; i; i = nx[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ed[i] != fa) &#123;</span><br><span class="line">            m1[ed[i]][<span class="number">0</span>] = x, m2[ed[i]][<span class="number">0</span>] = wt[i];</span><br><span class="line">            <span class="built_in">dfs</span>(ed[i], x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &lt; dep[y])</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[m1[x][i]] &gt;= dep[y]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m2[x][i] &lt; w) &#123;</span><br><span class="line">                maxn = <span class="built_in">max</span>(maxn, m2[x][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            x = m1[x][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">        <span class="keyword">return</span> w - maxn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m1[x][i] != m1[y][i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m2[x][i] &lt; w)</span><br><span class="line">                maxn = <span class="built_in">max</span>(maxn, m2[x][i]);</span><br><span class="line">            <span class="keyword">if</span> (m2[y][i] &lt; w)</span><br><span class="line">                maxn = <span class="built_in">max</span>(maxn, m2[y][i]);</span><br><span class="line">            x = m1[x][i], y = m1[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m2[x][<span class="number">0</span>] &lt; w) &#123;</span><br><span class="line">        maxn = <span class="built_in">max</span>(maxn, m2[x][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m2[y][<span class="number">0</span>] &lt; w) &#123;</span><br><span class="line">        maxn = <span class="built_in">max</span>(maxn, m2[y][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w - maxn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> used[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        f[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;e[i].x, &amp;e[i].y, &amp;e[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, [](<span class="keyword">const</span> Edge &amp;a, <span class="keyword">const</span> Edge &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;);</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, num = <span class="number">1</span>; num &lt; n &amp;&amp; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fx = <span class="built_in">find</span>(e[i].x), fy = <span class="built_in">find</span>(e[i].y);</span><br><span class="line">        <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">            f[fx] = fy, sum += e[i].w, num++, used[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">Addedge</span>(e[i].x, e[i].y, e[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = m1[j][i - <span class="number">1</span>];</span><br><span class="line">            m1[j][i] = m1[p][i - <span class="number">1</span>];</span><br><span class="line">            m2[j][i] = m2[m2[j][i - <span class="number">1</span>] &gt; m2[p][i - <span class="number">1</span>] ? j : p][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    ll ans = <span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, sum + <span class="built_in">query</span>(e[i].x, e[i].y, e[i].w));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成树计数">生成树计数</h2>
<p>生成树计数需要用到矩阵树 <code>Matrix-Tree</code> 定理。</p>
<h3 id="矩阵树定理">矩阵树定理</h3>
<p>首先定义 <span class="math inline">\(deg[i]\)</span> 表示 <span class="math inline">\(i\)</span> 号点的入度， <span class="math inline">\(g[i][j]\)</span> 表示 <span class="math inline">\(i\)</span> 到 <span class="math inline">\(j\)</span> 直连边的数量（考虑到重边）。</p>
<p>那么定义这张无向图的的 <span class="math inline">\(n\)</span> 阶基尔霍夫矩阵 <code>Kirchhoff Matrix</code> 为 <span class="math inline">\(A\)</span> ，有：</p>
<p><span class="math display">\[
A[i][j]=
\begin{cases}
deg[i] , &amp; i=j \\
-g[i][j] , &amp; i \neq j
\end{cases}
\]</span></p>
<p>无向图的生成树数就是其基尔霍夫矩阵的任意 <span class="math inline">\(n-1\)</span> 阶余子式。</p>
<p>有向图的树形图数是删除第 <span class="math inline">\(x\)</span> 行和第 <span class="math inline">\(x\)</span> 列的 <span class="math inline">\(n-1\)</span> 阶余子式，其中 <span class="math inline">\(x\)</span> 为选做为根的节点。</p>
<p>求余子式的具体做法是高斯消元，时间复杂度 <span class="math inline">\(\mathcal{O}(n^3)\)</span></p>
<h3 id="普通生成树计数">普通生成树计数</h3>
<h4 id="模板spoj-high">模板（SPOJ HIGH</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20</span></span><br><span class="line"></span><br><span class="line">ll a[N][N];</span><br><span class="line"><span class="keyword">int</span> g[N][N], dge[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ll sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (a[j][i]) &#123;</span><br><span class="line">                ll t = a[i][i] / a[j][i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= n; k++) &#123;</span><br><span class="line">                    a[i][k] = (a[i][k] - a[j][k] * t);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= n; k++) &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(a[i][k], a[j][k]);</span><br><span class="line">                &#125;</span><br><span class="line">                sum = -sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i][i] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum *= a[i][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum &gt; <span class="number">0</span> ? sum : -sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dge, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dge));</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(g));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">            g[u][v]++, g[v][u]++;</span><br><span class="line">            dge[u]++, dge[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                a[i][j] = i == j ? dge[i] : -g[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">gauss</span>(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最小生成树计数-1">最小生成树计数</h3>
<p>原理见最小生成树部分的最小生成树计数的暴力做法，这里把暴力部分替换为 <span class="math inline">\(\mathcal{O}(n^3)\)</span> 的矩阵树。</p>
<p>总体时间复杂度 <span class="math inline">\(\mathcal{O}(n^4)\)</span> 。</p>
<h4 id="模板luogu4208">模板（luogu4208</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 31011</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1001</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, w;</span><br><span class="line">&#125; e[M], se[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] == x ? x : <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">while</span> (a[j][i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> t = a[i][i] / a[j][i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; n; k++) &#123;</span><br><span class="line">                    a[i][k] = (a[i][k] - t * a[j][k] + mod) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[i]);</span><br><span class="line">                res = -res;</span><br><span class="line">            &#125;</span><br><span class="line">        res = res * a[i][i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (res + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> col[M], cw[M], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        f[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;e[i].x, &amp;e[i].y, &amp;e[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, [](<span class="keyword">const</span> Edge &amp;a, <span class="keyword">const</span> Edge &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>, w_num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; num &lt; n &amp;&amp; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fx = <span class="built_in">find</span>(e[i].x), fy = <span class="built_in">find</span>(e[i].y);</span><br><span class="line">        <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">            f[fx] = fy, se[num++] = e[i];</span><br><span class="line">            <span class="keyword">if</span> (e[i].w != cw[w_num]) &#123;</span><br><span class="line">                cw[++w_num] = e[i].w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; n) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w_num; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            f[j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (se[j].w != cw[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> fx = <span class="built_in">find</span>(se[j].x), fy = <span class="built_in">find</span>(se[j].y);</span><br><span class="line">                <span class="keyword">if</span> (fx != fy)</span><br><span class="line">                    f[fx] = fy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> col_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(j) == j) &#123;</span><br><span class="line">                col[j] = ++col_num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            col[j] = col[<span class="built_in">find</span>(j)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e[j].w == cw[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = col[e[j].x], y = col[e[j].y];</span><br><span class="line">                a[x][x]++, a[y][y]++, a[x][y]--, a[y][x]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = ans * <span class="built_in">gauss</span>(col_num) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (ans + mod) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm Contest</category>
      </categories>
      <tags>
        <tag>research</tag>
        <tag>Spanning Tree</tag>
      </tags>
  </entry>
</search>
